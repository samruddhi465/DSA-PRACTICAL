class hashtable:
    def _init_(self):
        self.m = (int(input("Enter size of hash table")))
        self.hashTable = [None] *self.m
        self.elecount = 0
        self.comparisons = 0
        print(self.hashTable)
    def hashFunction(self,key):
        return key % self.m
    def isfull(self):
        if self.elecount==self.m:
            return True
        else:
            return False
    def linearprobe(self,key,data):
        index=self.hashFunction(key)
        compare=0
        while(self.hashTable[index]!=None):
            index=index+1
            compare=compare+1
            if(index==self.m):
                index=0
            self.hashTable[index]=[key,data]
            self.elecount+=1
            print("data inserted at",index)
            print(self.hashTable)
            print("no of comparisons=",compare)
    def getlinear(self,key,data):
        index = self.hashFunction(key)
        while self.hashTable[index] is not None:
            if self.hashTable[index] == [key,data]:
                return index
            index = (index + 1) % self.m
        return None
    def quadraticprobe(self,key,data):
        index = self.hashFunction(key)
        compare=0
        i = 0
        while (self.hashTable[index] != None):
            index = (index + i * i) % self.m
            compare=compare+1
            i=i+1
            self.hashTable[index]=[key,data]
            self.elecount+=1
            print("data inserted at",index)
            print(self.hashTable)
            print("no of comparisons=",compare)
    def getQuadratic(self,key,data):
        idex=self.hashFunction(key)
        i=0
        while self.hashTable[index] is not None:
            if self.hashTable[index]==[key,data]:
                return index
            i=i+1
            index=(index + i*i) % self.m
        return None
    def insertVialinear(self,key,data):
        if self.isfull():
            print("table is full")
            return False
        index =self.hashFunction(key)
        if self.hashTable[index] == None:
            self.hashTable[index] = [key,data]
            self.elecount +=1
            print("Data insered at",index)
            print(self.hashTable)
        else:
            print("Collision occured apply linear method")
            self.linearprobe(key,data)
    def insertviaQuadratic(self,key,data):
        if self.isfull():
            print("Table io full")
            return False
        index = self.hashFunction(key)
        if self.hashTable[index] == None:
            self.hashTable[index] = [key,data]
            self.elecount +=1
            print("Data inserted at",index)
            print(self.hashTable)
        else:
            print("Collisions Occured Apply Quadreatic Method")
            self.quadraticprobe(key,data)
    def menu():
        obj = hashtable()
        ch = 0
        while(ch!=3):
            print("")
            print("1.Linear Probe")
            print("2.Quadratic Probe")
            print("3.Exit")   
            print("")
            ch = int(input("Enter your choice"))
            if ch == 1:
                ch2 == 0
                while(ch2 != 3):
                    print("Insert")
                    print("Search")
                    print("Exit")
                    ch2 = int(input("Enter Your choice"))
                if ch2 == 1:
                    a = int(input("Enter Phone number"))
                    b = str(input("Enter Name"))
                    obj.insertVialinear(a,b)
                elif ch2 == 2:
                    k = int(input("Enter Key to be searched"))
                    b = str(input("Enter Name"))
                    f = obj.getlinear(k,b)
                if(f == None):
                    print("Key Not found")
                else:
                    print("Key Found At",f)
            elif ch == 2:
                ch2 == 0
                obj1 = hashtable()
                while(ch2 != 3):
                    print("Insert")
                    print("Search")
                    print("Exit")
                    ch2 = int(input("Enter Your Chocie"))
                    if ch2 == 1:
                        a=int(input("Enter phone number"))
                        b=str(input("Enter Name"))
                        obj.insertviaQuadratic(a,b)
                    elif ch==2:
                        k = int(input("Enter key to be sarched"))
                        b = str(input("Enter name"))
                        f = obj1.quadraticprobe(k,b)
                        if(f == None):
                            print("Key not found")
                        else:
                            print("key found at",f)
    menu()